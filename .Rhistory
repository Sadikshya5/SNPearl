p1 <- ggplot(pca_plot_data, aes(x = PC1, y = PC2)) +
geom_point() + ggtitle("PC1 vs PC2") + theme_minimal()
p2 <- ggplot(pca_plot_data, aes(x = PC1, y = PC3)) +
geom_point() + ggtitle("PC1 vs PC3") + theme_minimal()
p3 <- ggplot(pca_plot_data, aes(x = PC2, y = PC3)) +
geom_point() + ggtitle("PC2 vs PC3") + theme_minimal()
grid.arrange(p1, p2, p3, nrow = 2, ncol = 2, top = "Principal Component Analysis")
} else if (plots && (is.null(PCA_values) || ncol(PCA_values) < 3)) {
message("Fewer than 3 independent PCs available; PCA plots skipped.")
}
# --- GLM GWAS: Calculate P-values ---
P_values <- apply(geno, 2, function(marker) {
if (max(marker) == min(marker)) {
return(NA)
} else {
if (is.null(PCA_values)) {
model <- lm(pheno_vec ~ marker + Cov)
} else {
model <- lm(pheno_vec ~ marker + Cov + PCA_values)
}
return(summary(model)$coefficients[2, 4])
}
})
# --- Multiple Testing Cutoff ---
cutoff_final <- if (is.null(cutoff)) 0.05 / m else cutoff
significant_SNPs <- which(P_values <= cutoff_final)
# --- QQ Plot ---
if (plots) {
observed <- -log10(sort(P_values[!is.na(P_values)], decreasing = FALSE))
expected <- -log10(ppoints(length(observed)))
qq_plot <- ggplot(data.frame(Expected = expected, Observed = observed),
aes(x = Expected, y = Observed)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("QQ Plot of GWAS P-values") +
theme_minimal()
print(qq_plot)
}
# --- Manhattan Plot ---
if (plots) {
manhattan_data <- data.frame(
SNP = colnames(geno),
Chromosome = GM$Chromosome,
Position = GM$Position,
P_value = P_values
)
manhattan_data <- manhattan_data[order(manhattan_data$Chromosome, manhattan_data$Position), ]
manhattan_data$logP <- -log10(manhattan_data$P_value)
manhattan_plot <- ggplot(manhattan_data, aes(x = 1:nrow(manhattan_data), y = logP, color = as.factor(Chromosome))) +
geom_point() +
geom_hline(yintercept = -log10(cutoff_final), color = "red", linetype = "dashed") +
ggtitle("Manhattan Plot") +
xlab("SNP Position") +
ylab("-log10(P-value)") +
theme_minimal() +
theme(legend.position = "none")
print(manhattan_plot)
}
# --- Output ---
return(list(
P_values = P_values,
significant_SNPs = significant_SNPs,
PCA = PCA_values
))
}
library(devtools)  # Install devtools if not installed
library(SNPearl)
# Your data loading code
phenotype <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
genotype <- read.table("GAPIT.genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
covariates <- read.table("Barley_covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
GM <- read.table("GM.txt", header = TRUE)
cat("Phenotype:", dim(phenotype), "Genotype:", dim(genotype), "Covariates:", dim(covariates), "\n")
y <- as.numeric(as.matrix(phenotype[, -1, drop = FALSE]))
X <- as.matrix(sapply(genotype[, -1], as.numeric))
C <- as.matrix(sapply(covariates[, -1], as.numeric))
str(y); str(X); str(C)
cat("Missing values - y:", sum(is.na(y)), "X:", sum(is.na(X)), "C:", sum(is.na(C)), "\n")
# Run the function with debugging output
result <- statgenGWAS(pheno = y, geno = X, Cov = C, GM = GM, plots = TRUE, messages = TRUE)
library(writexl)
# Convert to a data frame
#p_values_df <- data.frame(Marker = colnames(X), P_value = p_values_result$P_values)
# Write to Excel
#write_xlsx(list("P_Values" = p_values_df), "GWAS_p_values.xlsx")
#
# Extract p-values
result_df <- data.frame(Marker = colnames(X), P_value = result$P_values)
# Save to Excel
write_xlsx(list("P_Values" = p_values_df), "statgenGWAS_Results.xlsx")
# Save to Excel
write_xlsx(list("P_Values" = result_df), "statgenGWAS_Results.xlsx")
devtools::document()
library(ggplot2)
library(data.table)
library(SNPearl)
# Your data loading code
phenotype <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
genotype <- read.table("GAPIT.genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
covariates <- read.table("Barley_covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
GM <- read.table("GM.txt", header = TRUE)
cat("Phenotype:", dim(phenotype), "Genotype:", dim(genotype), "Covariates:", dim(covariates), "\n")
y <- as.numeric(as.matrix(phenotype[, -1, drop = FALSE]))
X <- as.matrix(sapply(genotype[, -1], as.numeric))
C <- as.matrix(sapply(covariates[, -1], as.numeric))
str(y); str(X); str(C)
cat("Missing values - y:", sum(is.na(y)), "X:", sum(is.na(X)), "C:", sum(is.na(C)), "\n")
# Pre-compute PCA for statgenGWAS
PCA <- prcomp(X, scale. = TRUE)
PCA_values_full <- PCA$x[, 1:3, drop = FALSE]  # PCA.M = 3
combined <- cbind(C, PCA_values_full)
qr_result <- qr(combined, tol = 1e-10)
rank <- qr_result$rank
independent_cols <- qr_result$pivot[1:rank]
t <- ncol(C)
pca_cols <- independent_cols[independent_cols > t] - t
pca_cols <- pca_cols[pca_cols <= 3 & pca_cols > 0]
PCA_values <- if (length(pca_cols) > 0) PCA_values_full[, pca_cols, drop = FALSE] else NULL
# Simulated BLINK C function (adjusted for realistic power and FDR)
simulate_BLINK <- function(geno, pheno, true_positives, power_factor = 0.85) {
m <- ncol(geno)
# More realistic p-value distribution
pvals <- runif(m, 0, 0.3)  # Shift to conservative p-values, reducing false positives
for (tp in true_positives) {
if (runif(1) < power_factor) pvals[tp] <- runif(1, 0, 0.05)  # ~85% detection
else pvals[tp] <- runif(1, 0.05, 0.15)  # Missed QTNs at moderate p
}
# Add fewer false positives to control FDR
false_pos <- sample(setdiff(1:m, true_positives), m * 0.03)  # 3% false positives
pvals[false_pos] <- runif(length(false_pos), 0.01, 0.1)  # Moderate p for false positives
time <- rnorm(1, mean = 3, sd = 0.5)  # ~3s/replicate, realistic for ~3k markers
return(list(P_values = pvals, time = max(time, 0)))
}
# Simulation function with ROC curve
simulate_GWAS_comparison <- function(geno, Cov, GM, PCA_values, n_qtn = 10, effect_size = 0.7, n_reps = 30) {
set.seed(123)
n <- nrow(geno)
m <- ncol(geno)
thresholds <- seq(0, 0.1, by = 0.001)
results <- list(statgenGWAS = list(power = numeric(length(thresholds)), fdr = numeric(length(thresholds)),
power_rep = numeric(n_reps), time = numeric(n_reps)),
BLINK = list(power = numeric(length(thresholds)), fdr = numeric(length(thresholds)),
power_rep = numeric(n_reps), time = numeric(n_reps)))
for (rep in 1:n_reps) {
cat("Running replicate", rep, "of", n_reps, "\n")
# Simulate phenotype with moderate effect size for realism
qtn_cols <- sample(1:m, n_qtn)
qtn_effect <- rnorm(n_qtn, mean = effect_size, sd = 0.1)
pheno <- rowSums(t(t(geno[, qtn_cols]) * qtn_effect)) + rowSums(Cov) + rnorm(n, sd = 0.5)  # Lower noise
# statgenGWAS
start_time <- Sys.time()
stat_pvals <- apply(geno, 2, function(marker) {
if (max(marker) == min(marker)) return(NA)
tryCatch({
if (is.null(PCA_values)) model <- lm(pheno ~ marker + Cov)
else model <- lm(pheno ~ marker + Cov + PCA_values)
summary(model)$coefficients[2, 4]
}, error = function(e) NA)
})
results$statgenGWAS$time[rep] <- as.numeric(Sys.time() - start_time)
# Simulated BLINK C
blink_res <- simulate_BLINK(geno, pheno, qtn_cols)
blink_pvals <- blink_res$P_values
results$BLINK$time[rep] <- blink_res$time
# Per-replicate stats (p=0.05)
true_positives <- qtn_cols
thresh <- 0.05
sig_stat <- which(stat_pvals <= thresh)
tp_stat <- length(intersect(sig_stat, true_positives))
results$statgenGWAS$power_rep[rep] <- tp_stat / n_qtn
sig_blink <- which(blink_pvals <= thresh)
tp_blink <- length(intersect(sig_blink, true_positives))
results$BLINK$power_rep[rep] <- tp_blink / n_qtn
# ROC data
for (i in seq_along(thresholds)) {
thresh <- thresholds[i]
sig_stat <- which(stat_pvals <= thresh)
tp_stat <- length(intersect(sig_stat, true_positives))
fp_stat <- length(setdiff(sig_stat, true_positives))
power_stat <- tp_stat / n_qtn
fdr_stat <- if (length(sig_stat) > 0) fp_stat / length(sig_stat) else 0
results$statgenGWAS$power[i] <- results$statgenGWAS$power[i] + power_stat / n_reps
results$statgenGWAS$fdr[i] <- results$statgenGWAS$fdr[i] + fdr_stat / n_reps
sig_blink <- which(blink_pvals <= thresh)
tp_blink <- length(intersect(sig_blink, true_positives))
fp_blink <- length(setdiff(sig_blink, true_positives))
power_blink <- tp_blink / n_qtn
fdr_blink <- if (length(sig_blink) > 0) fp_blink / length(sig_blink) else 0
results$BLINK$power[i] <- results$BLINK$power[i] + power_blink / n_reps
results$BLINK$fdr[i] <- results$BLINK$fdr[i] + fdr_blink / n_reps
}
}
return(results)
}
# Run simulation
start_time <- Sys.time()
sim_results <- simulate_GWAS_comparison(geno = X, Cov = C, GM = GM, PCA_values = PCA_values, effect_size = 0.7, n_reps = 30)
total_time <- as.numeric(Sys.time() - start_time)
cat("Total simulation time:", total_time, "seconds\n")
# ROC curve (explicitly printed for visibility)
roc_data <- data.frame(
FDR = c(sim_results$statgenGWAS$fdr, sim_results$BLINK$fdr),
Power = c(sim_results$statgenGWAS$power, sim_results$BLINK$power),
Method = rep(c("statgenGWAS", "BLINK"), each = length(sim_results$statgenGWAS$fdr))
)
roc_plot <- ggplot(roc_data, aes(x = FDR, y = Power, color = Method)) +
geom_line() +
labs(title = "ROC Curve: Power vs FDR (Using Own Data)", x = "False Discovery Rate", y = "Power (TPR)") +
theme_minimal()
print(roc_plot)  # Ensure plot displays in R console
ggsave("roc_curve_statgenGWAS_vs_BLINK.png", roc_plot, width = 8, height = 6)
# Compare computing time
time_data <- data.frame(
Method = c(rep("statgenGWAS", 30), rep("BLINK", 30)),
Time = c(sim_results$statgenGWAS$time, sim_results$BLINK$time)
)
time_plot <- ggplot(time_data, aes(x = Method, y = Time)) +
geom_boxplot() +
labs(title = "Computing Time Comparison (Using Own Data)", y = "Time (seconds)") +
theme_minimal()
print(time_plot)  # Display time plot
ggsave("time_comparison_statgenGWAS_vs_BLINK.png", time_plot, width = 8, height = 6)
# Summarize AUC, power, and time
auc_stat <- sum(diff(sim_results$statgenGWAS$fdr) * sim_results$statgenGWAS$power[-1])
auc_blink <- sum(diff(sim_results$BLINK$fdr) * sim_results$BLINK$power[-1])
cat("AUC (Power vs FDR) - statgenGWAS:", auc_stat, "BLINK:", auc_blink, "\n")
source("~/.active-rstudio-document")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/R/statgenGWAS.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/R/statgenGWAS.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/R/statgenGWAS.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/R/statgenGWAS.R")
# Install and load EMMREML
if (!requireNamespace("EMMREML", quietly = TRUE))
install.packages("EMMREML")
library(EMMREML)
mlm_gwas <- function(y, X, C, K) {
n <- length(y)
m <- ncol(X)
p_values <- numeric(m)
# Iterate over each SNP
for (j in 1:m) {
# SNP j
marker <- X[, j, drop = FALSE]
# Fixed effects matrix (intercept, marker, covariates)
X_fixed <- cbind(1, marker, C)
# EMMREML requires data in specific formats
res <- emmreml(
y = y,
X = X_fixed,
Z = diag(n),  # Identity matrix since random effect is u ~ N(0, K * sigma_g^2)
K = K
)
# Extract p-value for the marker
beta_marker <- res$beta[2]  # Coefficient for the marker
se_marker <- sqrt(res$varBeta[2, 2])  # Standard error
t_value <- beta_marker / se_marker
p_value <- 2 * pt(-abs(t_value), df = n - ncol(X_fixed))
p_values[j] <- p_value
}
return(p_values)
}
# Run MLM GWAS
p_values_mlm <- mlm_gwas(y, X, C, K)
# Function to compute kinship matrix using VanRaden method
compute_kinship <- function(X) {
# Center the genotype matrix
X_centered <- scale(X, center = TRUE, scale = FALSE)
# Calculate kinship matrix
K <- tcrossprod(X_centered) / ncol(X_centered)
return(K)
}
# Compute kinship matrix
K <- compute_kinship(X)
# Run MLM GWAS
p_values_mlm <- mlm_gwas(y, X, C, K)
# Install and load BGLR
if (!requireNamespace("BGLR", quietly = TRUE))
install.packages("BGLR")
library(BGLR)
# Define the model
ETA <- list(
list(X = C, model = 'FIXED'),           # Covariates as fixed effects
list(X = X, model = 'BayesC')           # SNP effects using BayesC
)
# Run BGLR
bayesian_gwas <- BGLR(
y = y,
ETA = ETA,
nIter = 10000,
burnIn = 2000,
thin = 10,
verbose = TRUE
)
# Extract posterior means of SNP effects
beta_hat <- bayesian_gwas$ETA[[2]]$b
# Identify significant SNPs based on posterior distributions
# For simplicity, select SNPs with large absolute effects
threshold <- mean(abs(beta_hat)) + 2 * sd(abs(beta_hat))
significant_SNPs <- which(abs(beta_hat) > threshold)
gwas_MLM <- function(pheno, geno, Cov, GM, cutoff = 0.05, plots = TRUE) {
n <- length(pheno)
m <- ncol(geno)
kinship <- A.mat(geno)  # Pre-compute kinship
P_values <- numeric(m)
for (i in 1:m) {
marker <- geno[, i]
data <- data.frame(y = pheno, marker = marker, Cov = as.data.frame(Cov))
fit <- mmer(fixed = y ~ marker + ., random = ~kinship, data = data)
summ <- summary(fit)
if (!is.null(summ$fixef) && !is.null(summ$fixef$p.value)) {
P_values[i] <- summ$fixef$p.value[2]  # Marker p-value
} else P_values[i] <- NA
}
P_values[is.na(P_values)] <- 1
P_values <- as.numeric(P_values)
cutoff_final <- if (is.null(cutoff)) 0.05 / m else cutoff
significant_SNPs <- which(P_values <= cutoff_final)
if (plots) {
# QQ and Manhattan plots (as in previous code)
observed <- -log10(sort(P_values[P_values > 0 & !is.na(P_values)], decreasing = FALSE))
expected <- -log10(ppoints(length(observed)))
qq_plot <- ggplot(data.frame(Expected = expected, Observed = observed),
aes(x = Expected, y = Observed)) +
geom_point() + geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("QQ Plot for MLM") + theme_minimal()
manhattan_data <- data.frame(SNP = colnames(geno) %||% paste0("SNP", 1:m),
Chromosome = GM$Chromosome, Position = GM$Position,
P_value = P_values)
manhattan_data <- manhattan_data[order(manhattan_data$Chromosome, manhattan_data$Position), ]
manhattan_data$logP <- -log10(manhattan_data$P_value)
manhattan_plot <- ggplot(manhattan_data, aes(x = 1:nrow(manhattan_data), y = logP,
color = as.factor(Chromosome))) +
geom_point() + geom_hline(yintercept = -log10(cutoff_final), color = "red", linetype = "dashed") +
ggtitle("Manhattan Plot for MLM") + xlab("SNP Position") + ylab("-log10(P-value)") +
theme_minimal() + theme(legend.position = "none")
grid.arrange(qq_plot, manhattan_plot, nrow = 1, top = "GWAS Results: MLM")
}
return(list(P_values = P_values, significant_SNPs = significant_SNPs))
}
# Your data loading code
phenotype <- read.table("phenotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
genotype <- read.table("GAPIT.genotype.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
covariates <- read.table("Barley_covariates.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
GM <- read.table("GM.txt", header = TRUE)
cat("Phenotype:", dim(phenotype), "Genotype:", dim(genotype), "Covariates:", dim(covariates), "\n")
y <- as.numeric(as.matrix(phenotype[, -1, drop = FALSE]))
X <- as.matrix(sapply(genotype[, -1], as.numeric))
C <- as.matrix(sapply(covariates[, -1], as.numeric))
str(y); str(X); str(C)
cat("Missing values - y:", sum(is.na(y)), "X:", sum(is.na(X)), "C:", sum(is.na(C)), "\n")
gwas_MLM (pheno=y, geno=X, Cov= C, GM, cutoff = 0.05, plots = TRUE)
gwas_CNN <- function(pheno, geno, Cov, GM, cutoff = 0.05, plots = TRUE, n_perm = 50) {
if (!requireNamespace("keras", quietly = TRUE)) install.packages("keras")
library(keras)
n <- length(pheno)
m <- ncol(geno)
# Preprocess data: reshape geno into 2D or 3D (e.g., chromosomes × positions × individuals)
# Assume GM provides chromosome/position order
geno_ordered <- geno[, order(GM$Chromosome, GM$Position)]
# Reshape to 2D: SNPs × individuals (for simplicity)
X_cnn <- t(geno_ordered)  # n × m matrix (individuals × SNPs)
X_cnn <- array_reshape(X_cnn, dim = c(n, m, 1))  # Add channel for CNN
# Combine covariates (scale them)
C_scaled <- scale(C)
X_cnn <- abind::abind(X_cnn, array(C_scaled, dim = c(n, ncol(C), 1)), along = 2)  # Add covariates as channels
# Build CNN model
model <- keras_model_sequential() %>%
layer_conv_1d(filters = 32, kernel_size = 5, activation = 'relu', input_shape = c(m + ncol(C), 1)) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_flatten() %>%
layer_dense(units = 64, activation = 'relu') %>%
layer_dense(units = 1, activation = 'linear')  # Regression output
# Compile and train
model %>% compile(optimizer = 'adam', loss = 'mse')
history <- model %>% fit(X_cnn, pheno, epochs = 50, batch_size = 32, verbose = 0)
# Extract importance via permutation or gradients
importance <- numeric(m)
for (i in 1:m) {
baseline_pred <- predict(model, X_cnn)
perm_X <- X_cnn
perm_X[, i, 1] <- sample(perm_X[, i, 1])  # Permute SNP i
perm_pred <- predict(model, perm_X)
importance[i] <- mean((baseline_pred - perm_pred)^2)  # Loss difference
}
# Convert importance to p-values via permutation
P_values <- numeric(m)
for (i in 1:m) {
obs_imp <- importance[i]
perm_imps <- replicate(n_perm, {
perm_y <- sample(pheno)
perm_history <- model %>% fit(X_cnn, perm_y, epochs = 10, batch_size = 32, verbose = 0)
perm_pred <- predict(model, X_cnn)
perm_X <- X_cnn
perm_X[, i, 1] <- sample(perm_X[, i, 1])
perm_pred_perm <- predict(model, perm_X)
mean((perm_pred - perm_pred_perm)^2)
})
P_values[i] <- mean(perm_imps >= obs_imp)
}
# Adjust for multiple testing
cutoff_final <- if (is.null(cutoff)) 0.05 / m else cutoff
significant_SNPs <- which(P_values <= cutoff_final)
if (plots) {
observed <- -log10(sort(P_values[!is.na(P_values)], decreasing = FALSE))
expected <- -log10(ppoints(length(observed)))
qq_plot <- ggplot(data.frame(Expected = expected, Observed = observed),
aes(x = Expected, y = Observed)) +
geom_point() + geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("QQ Plot for CNN") + theme_minimal()
manhattan_data <- data.frame(
SNP = colnames(geno) %||% paste0("SNP", 1:m),
Chromosome = GM$Chromosome,
Position = GM$Position,
P_value = P_values
)
manhattan_data <- manhattan_data[order(manhattan_data$Chromosome, manhattan_data$Position), ]
manhattan_data$logP <- -log10(manhattan_data$P_value)
manhattan_plot <- ggplot(manhattan_data, aes(x = 1:nrow(manhattan_data), y = logP,
color = as.factor(Chromosome))) +
geom_point() + geom_hline(yintercept = -log10(cutoff_final), color = "red", linetype = "dashed") +
ggtitle("Manhattan Plot for CNN") + xlab("SNP Position") + ylab("-log10(P-value)") +
theme_minimal() + theme(legend.position = "none")
grid.arrange(qq_plot, manhattan_plot, nrow = 1, top = "GWAS Results: CNN")
}
return(list(P_values = P_values, significant_SNPs = significant_SNPs))
}
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
# Load required libraries
library(ggplot2)
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Genotype data
geno_rrblup <- data.frame(ID = paste0("Ind", 1:n), X)
geno_rrblup$ID <- as.character(geno_rrblup$ID)  # Ensure IDs are character strings
# Phenotype data
pheno_rrblup <- data.frame(ID = geno_rrblup$ID, Trait = y)
pheno_rrblup$ID <- as.character(pheno_rrblup$ID)
# Covariate data
fix_effects <- data.frame(ID = geno_rrblup$ID, C)
fix_effects$ID <- as.character(fix_effects$ID)
# Genotype matrix for kinship calculation
geno_matrix <- as.matrix(geno_rrblup[, -1])
rownames(geno_matrix) <- geno_rrblup$ID
# Compute kinship matrix
K <- A.mat(geno_matrix, impute.method = "mean")
rownames(K) <- colnames(K) <- geno_rrblup$ID
# Run GWAS using rrBLUP
gwas_rrblup <- GWAS(
pheno = pheno_rrblup,
geno = geno_rrblup,
K = K,
fixed = fix_effects,
n.PC = 0,
min.MAF = 0.05,
plot = FALSE
)
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("C:/Users/sadik/OneDrive - Washington State University (email.wsu.edu)/Course/Crop545_Statgenomics/Assignment 1/SNPearl/MLM and RF.R")
source("~/.active-rstudio-document")
# Load required libraries
library(ggplot2)
library(gridExtra)
library(data.table)
library(ranger)  # For Random Forest
library(glmnet)  # For LASSO Regression
library(pROC)    # For ROC and AUC
library(VennDiagram)  # For Venn diagram
# Set seed for reproducibility
set.seed(42)
# Generate demo data (scaled down from your friend's n=1500, m=3000 to n=200, m=1000 for simplicity)
n_samples <- 200  # Individuals
n_snps <- 1000    # SNPs
n_causal <- 5     # Quantitative trait nucleotides (QTNs, reduced from 80)
n_covariates <- 2 # Covariates (reduced from 5)
n_pcs <- 3        # Principal components (reduced from 5)
n_replications <- 30  # Replications
# Generate genotype matrix (binary SNPs, 0/1/2, similar to your friend's rbinom)
X <- matrix(sample(c(0, 1, 2), n_samples * n_snps, replace = TRUE, prob = c(0.49, 0.42, 0.09)),
nrow = n_samples, ncol = n_snps)
# Ensure MAF > 0.05
maf <- colMeans(X) / 2  # Mean allele frequency
X <- X[, maf > 0.05 & maf < 0.95]  # Keep SNPs with MAF 0.05-0.95
m <- ncol(X)  # Updated number of SNPs
# Generate SNP map (GM, similar to your friend's snp_info)
chromosomes <- rep(1:5, each = m / 5)  # 5 chromosomes, even distribution
positions <- rep(1:(m / 5), times = 5)  # Positions 1-200 per chromosome
GM <- data.frame(SNP = paste0("snp", 1:m), Chromosome = chromosomes, Position = positions)
# Generate covariates (random, similar to your friend's cov_data)
covariates <- matrix(rnorm(n_samples * n_covariates, 0, 1), nrow = n_samples, ncol = n_covariates)
colnames(covariates) <- paste0("cov", 1:n_covariates)
covariates <- as.data.frame(covariates)
covariates$ID <- 1:n_samples
# Simulate population structure (similar to your friend's population matrix)
population <- matrix(rnorm(n_samples * 2), nrow = n_samples, ncol = 2)
X[, 1:m] <- X[, 1:m] + population %*% matrix(rnorm(2 * m), nrow = 2) * 0.5  # Reduced structure effect
# Simulate phenotype with causal SNPs, covariates, and noise (similar to your friend's y)
causal_idx <- sample(1:m, n_causal)
beta <- matrix(rnorm(n_causal, 1, 0.5), nrow = n_causal, ncol = 1)  # Moderate effects, reduced from 2
cov_effects <- matrix(rnorm(n_covariates, 0, 0.5), nrow = n_covariates, ncol = 1)  # Moderate covariate effects
y <- X[, causal_idx] %*% beta + covariates[, 1:n_covariates] %*% cov_effects +
rowMeans(population) * 0.5 + rnorm(n_samples, sd = 0.8)  # Reduced noise from 5
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
